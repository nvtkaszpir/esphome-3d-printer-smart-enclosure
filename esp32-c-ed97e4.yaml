# usb-c ed97e4
# MAC ..:..:..:ED:97:E4
# 08:D1:F9 ED97E4
substitutions:
  device_name: esp32-c-ed97e4
  domain: !secret DOMAIN
  lvgl_buffer_size: 25%

<<: !include include.lcd-touch.yaml

esphome:
  name: esp32-c-ed97e4

esp32:
  board: esp32dev
  # board: az-delivery-devkit-v4
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0 # disable sending to first uart device
  logs:
    component: ERROR

# generic services
time:
  - platform: sntp
    timezone: "Europe/Warsaw"
    id: sntp_time
    servers:
      - bagno
      - bagno.${domain}
      - pl.pool.ntp.org

web_server:
  port: 80

# Enable Home Assistant API
api:
  password: ""
  # reboot_timeout: 0s # disable reboot if not connected to HA

ota:
  platform: esphome
  password: ""

wifi:
  ssid: !secret WIFI_SSID
  password: !secret WIFI_PASSWORD
  # use_address: 192.168.1.57

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name}"
    password: !secret WIFI_AP_PASSWORD

captive_portal:

# web ui info
text_sensor:
  - platform: version
    name: "ESPHome Version ${device_name}"

  - platform: wifi_info
    ip_address:
      name: "IP Address ${device_name}"
    ssid:
      name: "Connected SSID ${device_name}"
    bssid:
      name: "Connected BSSID ${device_name}"
    mac_address:
      name: "Mac Wifi Address ${device_name}"

  - platform: version
    name: "ESPHome Version ${device_name}"

button:
  - platform: restart
    name: "${device_name} Restart"

i2c:
  sda: GPIO21
  scl: GPIO22

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23 # TX
  # miso_pin: GPIO19 # RX

# TODO: fix pinout to avoid esphome warning about using strap pins, for now it works
output:
  - id: lcd_brightness
    platform: ledc
    pin: GPIO17

light:
  - platform: monochromatic
    id: backlight
    name: "LCD backlight"
    output: lcd_brightness
    initial_state:
      state: on
      brightness: 60%
    restore_mode: ALWAYS_ON

display:
  - platform: ili9xxx
    model: ST7789V
    color_order: rgb
    auto_clear_enabled: false
    update_interval: never
    id: touch_display
    cs_pin: GPIO5
    dc_pin: GPIO2
    reset_pin: GPIO4
    invert_colors: true
    dimensions:
      height: 320 # 320 works, 300 trimmed on top
      width: 240
    #show_test_card: true
    data_rate: 80MHz

touchscreen:
  platform: cst816
  id: touch_surface
  interrupt_pin: GPIO16
  reset_pin: GPIO15
  touch_timeout: 1000ms # prevent touch event flood?
  on_touch:
    - logger.log: display touched
    - if:
        condition:
          lambda: 'return id(backlight_percent) == id(backlight_percent_minimum);'
        then:
          - lvgl.page.show: page_pmma_a
          - lvgl.page.previous: # need to show default page and 'go back' so on release we show next

    - globals.set:
        id: backlight_percent
        value: '80'
    - lvgl.resume:
    - light.turn_on:
        id: backlight
        brightness: !lambda return (id(backlight_percent) / 100.0);

  on_release:
    - lvgl.page.next:


script:
  - id: display_reprocess
    then:
      - logger.log:
          format: "display_reprocess triggered: backlight_percent=%d"
          args: [ 'id(backlight_percent)' ]
      - if:
          condition:
            lambda: 'return id(backlight_percent) == id(backlight_percent_minimum);'
          then:
            - logger.log: lvgl paused
            - lvgl.pause: # stop updating display if brightness is off
            - light.turn_off:
                id: backlight
          else:
            # notice not to do lvgl.resume otherwise it will never get 'idle'
            - light.turn_on:
                id: backlight
                brightness: !lambda return (id(backlight_percent) / 100.0);
            # # dumb fallback
            # - light.turn_on:
            #     id: backlight
            #     brightness: 25%
