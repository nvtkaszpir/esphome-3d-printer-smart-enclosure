# usb-c ed97e4
# # binary fan esperanza cyclone
# MAC ..:..:..:ED:97:E4
# 08:D1:F9 ED97E4
substitutions:
  device_name: esp32-host
  domain: !secret DOMAIN
  lvgl_buffer_size: 25%


# Enable logging
logger:
  # baud_rate: 0 # disable sending to first uart device
  logs:
    component: ERROR


# Enable Home Assistant API
api:
  password: ""
  # reboot_timeout: 0s # disable reboot if not connected to HA
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - globals.set:
              id: backlight_percent
              value: '80'
          - if:
              condition: lvgl.is_paused
              then:
                - lvgl.resume:
                - lvgl.widget.redraw:
          - lvgl.tileview.select:
              id: my_tileview
              tile_id: tile_status
          - lvgl.label.update:
              id: status_ha_api_label
              text: 'HA Connected'
          - lvgl.widget.update:
              id: status_ha_api_button
              styles: style_ha_status_connected
              state:
                checked: true

  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - globals.set:
              id: backlight_percent
              value: '80'
          - if:
              condition: lvgl.is_paused
              then:
                - lvgl.resume:
                - lvgl.widget.redraw:
          - lvgl.label.update:
              id: status_ha_api_label
              text: 'HA Disconnected'
          - lvgl.tileview.select:
              id: my_tileview
              tile_id: tile_status
          - lvgl.widget.update:
              id: status_ha_api_button
              styles: style_ha_status_disconnected
              state:
                checked: false

text_sensor:
  - platform: version
    name: "ESPHome Version ${device_name}"

  - platform: version
    name: "ESPHome Version ${device_name}"

button:
  - platform: restart
    name: "${device_name} Restart"

globals:
  - id: backlight_percent
    type: int
    restore_value: no
    initial_value: '50'
  # minimum LCD backlight, set to 0 to have it off
  - id: backlight_percent_minimum
    type: int
    restore_value: no
    initial_value: '0'
  # keep display on if air quality is above this level
  - id: backlight_on_if_air_q_above
    type: int
    restore_value: no
    initial_value: '200'


# modules
binary_sensor:
  - platform: homeassistant
    id: remote_light_warm
    entity_id: switch.esp32_c_cddf4c_relay_1
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: button_light_warm
          state:
            checked: !lambda return x;
  - platform: homeassistant
    id: remote_light_cold
    entity_id: switch.esp32_c_cddf4c_relay_2
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: button_light_cold
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: printer_power
    entity_id: switch.athom_smart_plug_v2_974d71
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: button_printer_power
          state:
            checked: !lambda return x;
sensor:

  - platform: uptime
    id: socket_uptime
    name: "Uptime"
    icon: mdi:clock-outline
    update_interval: 60s


  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.esp32_devkit_v4_9e8360_temperature

    on_value:
      then:
        - lvgl.label.update:
            id: temperature_value
            text:
              format: "%.1f°"
              args:
                - x
        - lvgl.indicator.update:
            id: temperature_needle
            # LVGL for indicator does not process floats, so we multiply it and will then adjust LVGL range 10x
            value: !lambda return x * 10;

  - platform: homeassistant
    id: current_humidity
    entity_id: sensor.esp32_devkit_v4_9e8360_humidity
    on_value:
      then:
        - lvgl.label.update:
            id: humidity_value
            text:
              format: "%.0f%%"
              args:
                - id(current_humidity).state
        - lvgl.indicator.update:
            id: humidity_needle
            value: !lambda return id(current_humidity).state;


  - platform: homeassistant
    id: particulate_1um
    entity_id: sensor.particulate_matter_1_0um_concentration
    on_value:
      then:
        - lvgl.arc.update:
            id: particulate_1um_value
            value: !lambda return id(particulate_1um).state;

  - platform: homeassistant
    id: particulate_2_5um
    entity_id: sensor.particulate_matter_2_5um_concentration
    on_value:
      then:
        - lvgl.arc.update:
            id: particulate_2_5um_value
            value: !lambda return id(particulate_2_5um).state;

  - platform: homeassistant
    id: particulate_10um
    entity_id: sensor.particulate_matter_10_0um_concentration
    on_value:
      then:
        - lvgl.arc.update:
            id: particulate_10um_value
            value: !lambda return id(particulate_10um).state;

  - platform: combination
    id: particulate_combination
    type: linear
    name: "Particulate"
    sources:
      - source: particulate_1um
        coeffecient: 2.2
      - source: particulate_2_5um
        coeffecient: 1.8
      - source: particulate_10um
        coeffecient: 1.0

    on_value:
      - lvgl.label.update:
          id: particulate_label_number
          text:
            format: "%.0f"
            args: [ 'id(particulate_combination).state' ]
      - if:
          condition:
            lambda: |-
              return x > 0.0;
          then:
            - lvgl.label.update:
                id: particulate_value
                text: "SUPER"
                text_color: 0x00FF00
            - lvgl.image.update:
                id: particulate_icon
                src: icon_particulate
            # comment out if you want screen to be off, oterwise it will be off and back on again on sensor update
            # - globals.set:
            #     id: backlight_percent
            #     value: "10"

      - if:
          condition:
            lambda: |-
              return x > 200.0;
          then:
            - logger.log:
                format: "AIR %.0f GOOD"
                args:
                  - 'id(particulate_combination).state'
            - lvgl.label.update:
                id: particulate_value
                text: "GOOD"
                text_color: 0x33cc33
            - lvgl.image.update:
                id: particulate_icon
                src: icon_particulate
            - globals.set:
                id: backlight_percent
                value: "20"

      - if:
          condition:
            lambda: |-
              return x > 300.0;
          then:
            - logger.log:
                format: "AIR %.0f FAIR"
                args:
                  - 'id(particulate_combination).state'
            - lvgl.label.update:
                id: particulate_value
                text: "FAIR"
                text_color: 0xffff66
            - lvgl.image.update:
                id: particulate_icon
                src: icon_particulate
            - globals.set:
                id: backlight_percent
                value: "60"

      - if:
          condition:
            lambda: |-
              return x > 500.0;
          then:
            - logger.log:
                format: "AIR %.0f BAD"
                args:
                  - 'id(particulate_combination).state'
            - lvgl.label.update:
                id: particulate_value
                text: "BAD"
                text_color: 0xff9900
            - lvgl.image.update:
                id: particulate_icon
                src: icon_biohazard
            - globals.set:
                id: backlight_percent
                value: "80"

      - if:
          condition:
            lambda: |-
              return x > 1000.0;
          then:
            - logger.log:
                format: "AIR %.0f HAZARD"
                args:
                  - 'id(particulate_combination).state'
            - lvgl.label.update:
                id: particulate_value
                text: "HAZARD"
                text_color: 0xFF0000
            - lvgl.image.update:
                id: particulate_icon
                src: icon_skull
            - globals.set:
                id: backlight_percent
                value: "100"


font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    # http://commondatastorage.googleapis.com/androiddevelopers/design/Roboto_Specimen_Book_20131031.pdf
    glyphs: '!"%()*+,-_.:?{|}°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/&ĄĆĘŁŃÓŚŻŹąćęłńóśżź'
    size: 24
    # 16 fits %Y-%m-%d %H:%M

  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto_18
    # http://commondatastorage.googleapis.com/androiddevelopers/design/Roboto_Specimen_Book_20131031.pdf
    # glyphs: '!"%()*+,-_.:?{|}°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/&ĄĆĘŁŃÓŚŻŹąćęłńóśżź'
    glyphs: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/' # just temperature/humidity
    size: 18
    # 16 fits %Y-%m-%d %H:%M
    bpp: 4

  - file: "gfonts://Roboto"
    id: roboto_38
    # glyphs: '!"%()*+,-_.:?{|}°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/&ĄĆĘŁŃÓŚŻŹąćęłńóśżź'
    glyphs: '%.°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/' # just temperature/humidity
    size: 38
    bpp: 4

image:
  - file: mdi:thermometer-lines
    id: icon_thermometer
    resize: 48x48
  - file: mdi:water-percent
    id: icon_humidity
    resize: 48x48
  - file: mdi:lungs # mdi:spray, mdi:weather-dust mdi:smoking mdi:smoke
    id: icon_particulate
    resize: 48x48
  - file: mdi:skull-scan-outline
    id: icon_skull
    resize: 48x48
  - file: mdi:biohazard
    id: icon_biohazard
    resize: 48x48
  - file: mdi:fan
    id: icon_fan
    resize: 48x48

touchscreen:
  platform: sdl
  id: touch_surface

  on_touch:
    - logger.log: display touched
    # - if:
    #     condition:
    #       lambda: 'return id(backlight_percent) == id(backlight_percent_minimum);'
    #     then:
    #       - lvgl.tileview.select:
    #           id: my_tileview
    #           tile_id: tile_pmma_a
    - globals.set:
        id: backlight_percent
        value: '80'
    # - lvgl.resume:
    # - light.turn_on:
    #     id: backlight
    #     brightness: !lambda return (id(backlight_percent) / 100.0);

  # on_release:
    # do not change the page if screen was dark
    # - if:
    #     condition:
    #       lambda: 'return id(backlight_percent) == id(backlight_percent_minimum);'
    #     then:
    #       - lvgl.tileview.select:
    #           id: my_tileview
    #           tile_id: tile_pmma_a


lvgl:
  log_level: INFO
  color_depth: 16
  theme: !include themes/main.yaml
  style_definitions: !include themes/style_definitions.yaml
  align: center
  buffer_size: ${lvgl_buffer_size} # set it low for non PSRAM devices, ushc as 25%

  on_idle:
    # switch to specific page after 10s of inactivity
    - timeout: 10s
      then:
        - logger.log: idle timeout short, switching to default page
        - lvgl.tileview.select:
            id: my_tileview
            tile_id: tile_pmma_a
            animated: true

    - timeout: 20s
      then:
        - logger.log: idle timeout medium, decreasing brightness
        - globals.set:
            id: backlight_percent
            value: '25'

    # comment out if you want display to be always on, or set proper value
    - timeout: 30s
      then:
        - logger.log: idle timeout long, decreasing brightness
        - if:
            condition:
              lambda: 'return id(particulate_combination).state < id(backlight_on_if_air_q_above);'
            then:
              # air quaity is very good, decrease background light to the minimum value
              - globals.set:
                  id: backlight_percent
                  value: !lambda return id(backlight_percent_minimum);


  msgboxes:
    <<: !include { file: widgets/msgboxes.yaml }

  pages:
    - id: page_pmma_a
      widgets:

        - tileview:
            id: my_tileview
            tiles:

              - id: tile_status
                row: 0
                column: 0
                dir: HOR
                widgets:
                  <<: !include { file: widgets/status.yaml }

              - id: tile_buttons
                row: 0
                column: 1
                dir: HOR
                widgets:
                  <<: !include { file: widgets/buttons.yaml }

              - id: tile_pmma_a
                row: 0
                column: 2
                dir: HOR
                widgets:
                  <<: !include { file: widgets/pmma.yaml }

              - id: tile_temp
                row: 0
                column: 3
                dir: HOR
                widgets:
                  <<: !include { file: widgets/temperature.yaml }

              - id: tile_humidity
                row: 0
                column: 4
                dir: HOR
                widgets:
                  <<: !include { file: widgets/humidity.yaml }

script:
  - id: display_reprocess
    then:
      - logger.log:
          format: "display_reprocess triggered: backlight_percent=%d"
          args: [ 'id(backlight_percent)' ]
      - if:
          condition:
            lambda: 'return id(backlight_percent) == 0;'
          then:
            - logger.log: lvgl paused
            - lvgl.pause: # stop updating display if brightness is off
          else:
            - if:
                condition: lvgl.is_paused
                then:
                  - lvgl.resume:
                  - lvgl.widget.redraw:


interval:
  - interval: 10s
    then:
      - script.execute: display_reprocess

# TODO: air filtration trigger only if the printer is printing (avoid air filtering when cooking :D )
